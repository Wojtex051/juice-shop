name: DevSecOps CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  IMAGE_NAME: juice-shop
  IMAGE_TAG: latest

jobs:
  build-test:
    name: Build, Test & Docker Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Chromium (for Karma tests)
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser
          echo "CHROME_BIN=$(which chromium-browser)" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test

      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

  sca:
    name: SCA – npm audit
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit (SCA)
        continue-on-error: true
        run: npm audit --audit-level=high --json > sca-report.json

      - name: Upload SCA report
        uses: actions/upload-artifact@v4
        with:
          name: sca-report
          path: sca-report.json

  sast:
    name: SAST – Semgrep
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Semgrep
        run: |
          curl -sL https://semgrep.dev/install.sh | sh
          echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV

      - name: Run Semgrep
        continue-on-error: true
        run: semgrep --config auto --json > semgrep-report.json

      - name: Upload SAST report
        uses: actions/upload-artifact@v4
        with:
          name: sast-report
          path: semgrep-report.json

  secretscan:
    name: Secrets Scan – Gitleaks
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Gitleaks
        run: |
          curl -sL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-linux-amd64 -o gitleaks
          chmod +x gitleaks

      - name: Scan for secrets
        continue-on-error: true
        run: ./gitleaks detect --no-git --report-format=json --report-path=gitleaks-report.json

      - name: Upload Secrets report
        uses: actions/upload-artifact@v4
        with:
          name: secrets-report
          path: gitleaks-report.json

  dast:
    name: DAST – OWASP ZAP
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build Docker image for DAST
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Run application container
        run: docker run -d -p 3000:3000 --name juice-shop-test ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Wait for application to be ready
        run: |
          for i in {1..15}; do
            if curl -s http://localhost:3000 | grep -q "OWASP Juice Shop"; then
              echo "Application is up";
              break;
            fi
            sleep 3
          done

      - name: Run OWASP ZAP full scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: "http://localhost:3000"
          format: "json"
          report_name: zap-report.json
          fail_action: false

      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-report.json

      - name: Stop application container
        if: always()
        run: docker stop juice-shop-test

  trivy:
    name: Container Scan – Trivy
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      - name: Pull and run Trivy
        continue-on-error: true
        run: |
          docker pull aquasec/trivy:latest
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --severity HIGH,CRITICAL --format json --output trivy-report.json ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

  push-image:
    name: Push image to Docker Hub
    runs-on: ubuntu-latest
    needs:
      - build-test
      - sca
      - sast
      - secretscan
      - dast
      - trivy
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Tag and push image
        run: |
          docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
